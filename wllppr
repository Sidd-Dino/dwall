#!/bin/sh
#
# wllppr

cache_dir="${XDG_CACHE_HOME:=${HOME}/.cache}/wllppr"
url="${WLLPPR_URL:-https://source.unsplash.com/random/1920x1080}"
wallpaper_setter="${WLLPPR_SETTER:-feh --bg-fill}"

LOG() { printf '[*] %s\n' "$1"; }
ERR() { printf '[!] %s\n' "$1" >&2; exit 1; }


set_wallpaper() { $wallpaper_setter "$file"; }

get_img() {
    curl -sL "$url" --output wllppr-img || {
        ERR "could not download the image"
    }
}


export_colors() {
:>|wllppr-hex
:>|wllppr-kitty.conf
:>|wllppr-sequence
:>|wllppr-tty.sh
:>|wllppr.sh
:>|wllppr.vim
:>|wllppr.Xresources

# wllppr-hex -------------------------------------------------------------------
while IFS= read -r Ln; do
    printf "%s\n" "$Ln" >> wllppr-hex
done <<EOF
${color0}
${color1}
${color2}
${color3}
${color4}
${color5}
${color6}
${color7}
${color8}
${color9}
${color10}
${color11}
${color12}
${color13}
${color14}
${color15}
EOF

# wllppr-kitty.conf ------------------------------------------------------------
while IFS= read -r Ln; do
    printf "%s\n" "$Ln" >> wllppr-kitty.conf
done <<EOF
foreground         ${foreground}
background         ${background}
cursor             ${cursor}

color0       ${color0}
color8       ${color8}
color1       ${color1}
color9       ${color9}
color2       ${color2}
color10      ${color10}
color3       ${color3}
color11      ${color11}
color4       ${color4}
color12      ${color12}
color5       ${color5}
color13      ${color13}
color6       ${color6}
color14      ${color14}
color7       ${color7}
color15      ${color15}
EOF

# wllppr-tty.sh ----------------------------------------------------------------
printf '%b' "$sequence" > wllppr-sequence

# wllppr-tty.sh ----------------------------------------------------------------
while IFS= read -r Ln; do
    printf "%s\n" "$Ln" >> wllppr-tty.sh
done <<EOF
#!/bin/sh
[ "\${{TERM:-none}}" = "linux" ] && \\
    printf '%b' '\e]P0${color0#\#}
                 \e]P1${color1#\#}
                 \e]P2${color2#\#}
                 \e]P3${color3#\#}
                 \e]P4${color4#\#}
                 \e]P5${color5#\#}
                 \e]P6${color6#\#}
                 \e]P7${color7#\#}
                 \e]P8${color8#\#}
                 \e]P9${color9#\#}
                 \e]PA${color10#\#}
                 \e]PB${color11#\#}
                 \e]PC${color12#\#}
                 \e]PD${color13#\#}
                 \e]PE${color14#\#}
                 \e]PF${color15#\#}
                 \ec'
EOF

# wllppr.sh --------------------------------------------------------------------
while IFS= read -r Ln; do
    printf "%s\n" "$Ln" >> wllppr.sh
done <<EOF
# Shell variables
# Generated by 'wllppr'

# Special
background='${background}'
foreground='${foreground}'
cursor='${cursor}'

# Colors
color0='${color0}'
color1='${color1}'
color2='${color2}'
color3='${color3}'
color4='${color4}'
color5='${color5}'
color6='${color6}'
color7='${color7}'
color8='${color8}'
color9='${color9}'
color10='${color10}'
color11='${color11}'
color12='${color12}'
color13='${color13}'
color14='${color14}'
color15='${color15}'

# FZF colors
export FZF_DEFAULT_OPTS="
    \$FZF_DEFAULT_OPTS
    --color fg:7,bg:0,hl:1,fg+:232,bg+:1,hl+:255
    --color info:7,prompt:2,spinner:1,pointer:232,marker:1
"

# Fix LS_COLORS being unreadable.
export LS_COLORS="\${{LS_COLORS}}:su=30;41:ow=30;42:st=30;44:"
EOF

# wllppr.vim -------------------------------------------------------------------
while IFS= read -r Ln; do
    printf "%s\n" "$Ln" >> wllppr.vim
done <<EOF
" Special
let background = "${background}"
let foreground = "${foreground}"
let cursor     = "${cursor}"

" Colors
let color0  = "${color0}"
let color1  = "${color1}"
let color2  = "${color2}"
let color3  = "${color3}"
let color4  = "${color4}"
let color5  = "${color5}"
let color6  = "${color6}"
let color7  = "${color7}"
let color8  = "${color8}"
let color9  = "${color9}"
let color10 = "${color10}"
let color11 = "${color11}"
let color12 = "${color12}"
let color13 = "${color13}"
let color14 = "${color14}"
let color15 = "${color15}"
EOF

# wllppr.Xresource -------------------------------------------------------------
while IFS= read -r Ln; do
    printf "%s\n" "$Ln" >> wllppr.Xresources
done <<EOF
! X colors.
! Generated by 'wal'
*foreground:        ${foreground}
*background:        ${background}
*.foreground:       ${foreground}
*.background:       ${background}
emacs*foreground:   ${foreground}
emacs*background:   ${background}
URxvt*foreground:   ${foreground}
XTerm*foreground:   ${foreground}
UXTerm*foreground:  ${foreground}
URxvt*background:   [100]${background}
XTerm*background:   ${background}
UXTerm*background:  ${background}
URxvt*cursorColor:  ${cursor}
XTerm*cursorColor:  ${cursor}
UXTerm*cursorColor: ${cursor}
URxvt*borderColor:  [100]${background}

! Colors 0-15.
*.color0: ${color0}
*color0:  ${color0}
*.color1: ${color1}
*color1:  ${color1}
*.color2: ${color2}
*color2:  ${color2}
*.color3: ${color3}
*color3:  ${color3}
*.color4: ${color4}
*color4:  ${color4}
*.color5: ${color5}
*color5:  ${color5}
*.color6: ${color6}
*color6:  ${color6}
*.color7: ${color7}
*color7:  ${color7}
*.color8: ${color8}
*color8:  ${color8}
*.color9: ${color9}
*color9:  ${color9}
*.color10: ${color10}
*color10:  ${color10}
*.color11: ${color11}
*color11:  ${color11}
*.color12: ${color12}
*color12:  ${color12}
*.color13: ${color13}
*color13:  ${color13}
*.color14: ${color14}
*color14:  ${color14}
*.color15: ${color15}
*color15:  ${color15}

! Black color that will not be affected by bold highlighting.
*.color66: ${color0}
*color66:  ${color0}

! Set depth to make transparency work.
URxvt*depth: 32
EOF
}

reload() {
    [ "$TERM" = "linux" ] && sh wllppr-tty.sh
    command -v xrdb >/dev/null && xrdb -merge -quiet wllppr.Xresources
    command -v kitty >/dev/null && [ "$TERM" = "xterm-kitty" ] && \
        kitty @ set-colors -all wllppr-kitty.conf
}


display_palette() {
    n=0
    while [ "$n" -lt 16 ]; do
        col=$n

        [ "$n" -gt 7 ] && col="8;5;$n"
        printf '\033[4%sm%*s\033[m' "$col" "$((8 / 2))" ""

        n=$((n+1))
        [ "$((n % 8))" = 0 ] && printf '\n'
    done
    unset n col
}


gen_seq() {
    printf '\033]4;%s;%s\033\\' "$1" "$2"
}

gen_spc_seq() {
    if [ "$1" -ge 11 ] && [ "$1" -le 708 ] && [ "$alpha" -ne 100 ] ; then
            printf '\033]%s;[%s]%s\033\\' "$1" "$alpha" "$2"
            return
    fi

    printf '\033]%s;%s\033\\' "$1" "$2"
}

set_sequence() {
    sequence=''
    index=0
    while [ "$index" -lt 16 ]; do
        sequence=$sequence$(gen_seq "$index" "$(eval printf '%s' "\$color${index}")")
        index=$((index+1))
    done

    sequence=$sequence$(gen_spc_seq 10 "$foreground")
    sequence=$sequence$(gen_spc_seq 11 "$background")
    sequence=$sequence$(gen_spc_seq 12 "$cursor")
    sequence=$sequence$(gen_spc_seq 13 "$foreground")
    sequence=$sequence$(gen_spc_seq 17 "$foreground")
    sequence=$sequence$(gen_spc_seq 19 "$background")
    sequence=$sequence$(gen_spc_seq 232 "$background")
    sequence=$sequence$(gen_spc_seq 256 "$foreground")
    sequence=$sequence$(gen_spc_seq 257 "$background")

    set -- /dev/pts/[0-9]*
    for term do
        [ -w "$term" ] && printf '%b' "$sequence" > "$term"
    done

    unset index term
}


set_colors() {
    alpha=${alpha:-100}
    background=${1}
    foreground=${15}
    cursor=${15}

    color0=${1}
    color1=${9}
    color2=${10}
    color3=${11}
    color4=${12}
    color5=${13}
    color6=${14}
    color7=${15}
    color8=${16}
    color9=${9}
    color10=${10}
    color11=${11}
    color12=${12}
    color13=${13}
    color14=${14}
    color15=${15}
}

get_colors() {
    # check if ImageMagick is installed
    command -v convert >/dev/null || ERR "convert: ImageMagick not found"
    command -v identify >/dev/null || ERR "identify: ImageMagick not found"

    # check if a valid file for pulling colors
    identify -format '%f %m %b\n' "$file" || ERR "bad file"

    color_count=16
    while [ "$#" -le 15 ]; do
        set -- $(convert "$file" -resize 25% -colors "$color_count" \
                        -unique-colors txt:- | grep -E -o " \#.{6}")

        color_count=$((color_count+1))
        [ "$color_count" = 36 ] && ERR "unable to generate a proper pallete"
    done

    set_colors "$@"
    unset color_count
}


get_args() {
    while :; do [ "$#" -eq 0 ] && return
    case "$1" in
        -i)
            [ -f "$2" ] || ERR "bad image file"
            file=$(cd "$(dirname "$2")"; printf '%s' "$PWD")/$(basename "$2")
            shift
        ;;

        -a)
            alpha=$2
            shift
        ;;

        -v)
            printf 'wllppr V0.0.1\n'
            exit
        ;;

        *)
            printf 'wllppr <args>\n\n'
            printf -- '-i <image file>\n'
            printf -- '-a <alpha>\n'
            printf -- '-h (help)\n'
            printf -- '-v (version)\n'
            exit
        ;;
    esac; shift; done
}

main() {
    get_args "$@"

    mkdir -p "$cache_dir"
    cd "$cache_dir" || ERR "error: Unable to open cache folder"

    [ "${#file}" -eq 0 ] && {
        file='wllppr-img'
        LOG "downloading image"
        get_img
    }

    LOG "generating color pallete"
    get_colors

    LOG "setting wallpaper"
    set_wallpaper

    LOG "setting terminal colors"
    set_sequence

    LOG "current palette"
    display_palette

    LOG "exporting colors"
    export_colors

    LOG "reloading stuff"
    reload
}

main "$@"
